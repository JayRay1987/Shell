SHELL
# print working directory
pwd

# listing; list contents of directory
ls

# shows what's in the directory specified
ls /home/repl

# it is absolute, no / not asolute i.e. relative
/

# change directory
cd

# Parent of a directory is the directory above.
..

# 
cd ..

# means current directory
.

# means home
~

#copies files
cp

#example
cp original.txt duplicate.txt

# copies both csvs into backup directory
cp seasonal/summer.csv seasonal/winter.csv backup

# moves a file
mv

# example
mv autumn.csv winter.csv ..

# use mv to rename files
mv winter.csv winter.csv.bck

# remove files
rm

#remove directories
rmdir

#it will only work if there are no files in the directory so you need to delete all the files first before deleting the directory

#to create a new directory
mkdir directory_name

# view file
cat filename.txt

#
less filename.txt filename.txt

# spacebar - to go down in file

# to go to next file
:n

# to quit
:q to quit

# to show first few rows
head filename.txt

#show first 5 rows
head -n 5 filename

# shows everything underneath a directory
ls -R

ls -F -R 
# -F flag prints a / after every directory name and * after the name of every runnable program

#brings up all info on head function
man head

#displays all but first 6 lines of filename.
tail -n +7 filename.txt

#selects columns
cut

#for example 
cut -f 2-5,8 -d , values.csv

#means "select columns 2 through 5 and columns 8 using comma as a separator"
#-f means fields -d means delimiter

#prints a list of hte commands run recently
history

#each command will be listed with a number before it. to run the 55th command write:
!55

#OR

#rerun the most recent usage of a command:

!head

grep biscuspid seasonal/winter.csv

#grep can search for patterns as well; we will explore those in the next course. What's more important right now is some of grep's more common flags:

#-c: print a count of matching lines rather than the lines themselves
#-h: do not print the names of files when searching multiple files
#-i: ignore case (e.g., treat "Regression" and "regression" as matches)
#-l: print the names of files that contain matches, not the matches
#-n: print line numbers for matching lines
#-v: invert the match, i.e., only show lines that don't match

#prints the number of lines with incisor in winter.csv
grep -c incisor seasonal/winter.csv

paste seasonal/autumn.csv seasonal/winter.csv

#PRINT THE FIRST 5 ROWS OF SUMMER.CSV to TOP.CSV
head -n 5 seasonal/summer.csv > top.csv

#> redirects the head output to a file

#| use pipe to combine many commands

cut -d , -f 1 seasonal/spring.csv | grep -v Date | head -n 10

#wc - word count
#-c - characters
#-w - words
#-l - lines

grep 2017-07 seasonal/spring.csv | wc -l

#WILDCARDS
#*

head -n 5 seasonal/*.csv

#matches a single character
#?

#example
201?.txt

#[...]

#matches any one of the charcaters inside square brackets.

#201[78] will match to 2017 or 2018

#{...}

#matches any of hte coomma separated patterns inside brackets.

#{*.csv, *.txt}

#will match to any thing in the brackets.

#-n - sort numerically

#-r - sort in reverse order

#-b - ignores blanks

#-f - be case sensitive

#uniq - removes duplicate lines


#EXAMPLE
sort -n -r

cut -d , -f 2 seasonal/winter.csv | grep -v Tooth | sort | uniq -c

#to stop a command
#ctrl-C

#How many records are in the shortest of the seasonal data files?

wc -l seasonal/*.csv | grep -v total | sort -n | head -n 1

#Batch Processing
set

#How many old commands stored in your command history
set | grep HISTFILESIZE

#print a variable's value
echo Hello World

#use $ in front of a variable to get it's value
echo $USER
echo $OSTYPE

#assign a value to a name
training=seasonal/summer.csv
#no spaces around = sign

#loops
for filetype docx odt pdf: do echo $filetype; done

#returns filename
for filename seasonal/*.csv; do echo $filename; done

#returns filename
for filename people/*; do echo $filename; done

#more loops
datasets=seasonal/*.csv

for filename in datasets; do echo $filename; done

#many commands in a single loop
#this loop prints the second line of each file
for file in seasonal/*.csv; do head -n 2 $file | tail -n 1; done
#this loop prints the last entry from 2017-07 from every file
for file in seasonal/*.csv; do grep 2017-07 $file | tail -n 1; done

#many things in a command
for f in seasonal/*.csv; do echo $f; head -n 2 $f | tail -n 1; done

#Open or create a file in text editor
nano filname.txt

#ctrl-o to save
#ctrl-x to exit

#save history
history | tail -n 10 > history.txt

#run commands in a file
nano filename.txt
#input commands into file and save. run file from command line:
bash filename.txt
#or save output to a new file:
bash filename.txt > filename.out

#$@ in a txt file
nano count-records.txt
#input: tail -q -n +2 $@ | wc -l

#run command in file with specified txt files for $@
bash count-records.txt seasonal/*.csv > num-records-out



